================================
  MATCHING COLOR MODULE
  คู่มือการใช้งานและอธิบายฟังก์ชัน
================================

โครงสร้างโมดูล
--------------
matching_color/
├── color_converter.py      # แปลงสีระหว่างรูปแบบต่างๆ
├── color_distance.py       # คำนวณระยะห่างและความคล้ายคลึงของสี
├── color_theory.py         # สร้างสีตามทฤษฎีสี
├── color_filter.py         # กรองและจับคู่สี
└── matching_logic.py       # ฟังก์ชันหลัก (Entry Point)


================================
1. COLOR_CONVERTER.PY
================================

หน้าที่: แปลงสีระหว่างรูปแบบต่างๆ (Hex, RGB, HSV)

ฟังก์ชัน:
---------

hex_to_rgb_float(hex_color)
  - แปลงสีจาก Hex (#FF5733) เป็น RGB ในรูปแบบ float (0.0-1.0)
  - Input: '#FF5733' หรือ 'FF5733'
  - Output: (0.9, 0.34, 0.2)
  - ใช้สำหรับ: การคำนวณทางคณิตศาสตร์กับสี

hex_to_rgb_int(hex_color)
  - แปลงสีจาก Hex (#FF5733) เป็น RGB ในรูปแบบ int (0-255)
  - Input: '#FF5733'
  - Output: (255, 87, 51)
  - ใช้สำหรับ: แสดงผลและการคำนวณ Delta E

rgb_to_hex(rgb_float)
  - แปลงสีจาก RGB float กลับเป็น Hex
  - Input: (0.9, 0.34, 0.2)
  - Output: '#FF5733'
  - ใช้สำหรับ: แปลงสีที่คำนวณแล้วกลับเป็น Hex

hex_to_hsv(hex_color)
  - แปลงสีจาก Hex เป็น HSV (Hue, Saturation, Value)
  - Input: '#FF5733'
  - Output: (0.033, 0.8, 1.0)
  - ใช้สำหรับ: การวิเคราะห์และปรับแต่งสี
  - HSV คืออะไร:
    * H (Hue) = โทนสี (0-1 หรือ 0-360 องศา) เช่น แดง ส้ม เหลือง
    * S (Saturation) = ความอิ่มตัวของสี (0-1) ยิ่งสูงยิ่งสดใส
    * V (Value) = ความสว่าง (0-1) ยิ่งสูงยิ่งสว่าง

hsv_to_hex(h, s, v)
  - แปลงสีจาก HSV กลับเป็น Hex
  - Input: (0.033, 0.8, 1.0)
  - Output: '#FF5733'
  - ใช้สำหรับ: สร้างสีใหม่จากการคำนวณทฤษฎีสี


================================
2. COLOR_DISTANCE.PY
================================

หน้าที่: คำนวณระยะห่างและความคล้ายคลึงของสี

ฟังก์ชัน:
---------

rgb_distance(rgb1, rgb2)
  - คำนวณระยะห่างระหว่างสีแบบ Euclidean (Legacy)
  - Input: (255, 0, 0), (0, 255, 0)
  - Output: 360.62 (ระยะห่างระหว่างสีแดงและเขียว)
  - ข้อจำกัด: ไม่สอดคล้องกับการรับรู้ของมนุษย์
  - เก็บไว้เพื่อความเข้ากันได้เท่านั้น

delta_e_distance(hex1, hex2)
  - คำนวณความแตกต่างของสีโดยใช้ Delta E CIE2000
  - มาตรฐานที่สอดคล้องกับการรับรู้ของตามนุษย์
  - Input: '#FF0000', '#FF1111'
  - Output: 5.2 (ค่า Delta E)

  การตอบสนอง Delta E:
    * < 1.0   = มองไม่เห็นความแตกต่าง
    * 1-2     = เห็นได้เมื่อสังเกตใกล้ๆ
    * 2-10    = เห็นทันทีเมื่อมอง
    * 11-49   = สีคล้ายกันมากกว่าตรงข้าม
    * > 50    = สีต่างกันอย่างชัดเจน

  ตัวอย่างการใช้งาน:
    - ระบบใช้ threshold = 25 สำหรับการจับคู่
    - ถ้า Delta E <= 25 = ถือว่าเข้ากันได้
    - ถ้า Delta E > 25 = ถือว่าไม่เข้ากัน

is_neutral_color(hex_color, saturation_threshold, value_threshold_min, value_threshold_max)
  - ตรวจสอบว่าสีเป็นสีกลาง (Neutral) หรือไม่
  - สีกลาง คือ: ขาว, เทา, ดำ หรือสีที่ไม่สดใส
  - Input: '#808080' (สีเทา)
  - Output: True

  เงื่อนไขสีกลาง:
    1. Saturation <= 0.15 (ความอิ่มตัวต่ำ)
    2. หรือ Value <= 0.15 (มืดมาก - ใกล้สีดำ)
    3. หรือ Value >= 0.95 และ Saturation <= 0.15 (สว่างมาก - ใกล้สีขาว)

  ความสำคัญ:
    - สีกลางเข้ากับทุกสี จึงผ่านการกรองทันที
    - ไม่ต้องตรวจสอบทฤษฎีสี


================================
3. COLOR_THEORY.PY
================================

หน้าที่: สร้างสีตามทฤษฎีสี (Color Theory)

ฟังก์ชัน:
---------

get_complementary_colors(main_hex, s, v)
  - สร้างสีตรงข้าม (Complementary Colors)
  - หลักการ: หมุนวงล้อสี 180 องศา
  - Input: '#FF0000' (แดง)
  - Output: ['#00FFFF'] (ฟ้า-เขียว)
  - ใช้สำหรับ: การสร้างคอนทราสต์ที่โดดเด่น
  - ตัวอย่าง: เสื้อแดงจับคู่กางเกงเขียวอมฟ้า

get_analogous_colors(main_hex, s, v, angle)
  - สร้างสีใกล้เคียง (Analogous Colors)
  - หลักการ: หมุนวงล้อสี ±30 องศา (ปรับได้)
  - Input: '#FF0000' (แดง), angle=30
  - Output: ['#FF8000' (แดงส้ม), '#FF0080' (แดงชมพู)]
  - ใช้สำหรับ: การจับคู่ที่ดูกลมกลืนนุ่มนวล
  - ตัวอย่าง: เสื้อแดงจับคู่กางเกงส้มอมแดง

get_triadic_colors(main_hex, s, v)
  - สร้างสีสามเหลี่ยม (Triadic Colors)
  - หลักการ: แบ่งวงล้อสีเป็น 3 ส่วนเท่าๆ กัน (120 องศา)
  - Input: '#FF0000' (แดง)
  - Output: ['#00FF00' (เขียว), '#0000FF' (น้ำเงิน)]
  - ใช้สำหรับ: การสร้างความสมดุลและหลากหลาย
  - ตัวอย่าง: ชุดที่มี 3 สี แดง-เขียว-น้ำเงิน

get_theory_colors(main_hex, theories)
  - สร้างสีตามทฤษฎีหลายแบบพร้อมกัน
  - Input: '#FF0000', ['complementary', 'analogous']
  - Output: รายการสีทั้งหมดจากทุกทฤษฎี (ไม่ซ้ำกัน)

  การปรับแต่งอัตโนมัติ:
    - Saturation จะถูกปรับเป็นอย่างน้อย 50% (0.5)
    - Value จะถูกปรับให้อยู่ระหว่าง 40-85% (0.4-0.85)
    - เพื่อให้สีที่สร้างมีความสดใสพอที่จะจับคู่ได้


================================
4. COLOR_FILTER.PY
================================

หน้าที่: กรองและจับคู่สีตามเงื่อนไขต่างๆ

ฟังก์ชัน:
---------

filter_and_match_colors(candidates, theory_colors_hex, good_lucky, bad_lucky, theory_threshold, lucky_threshold)
  - กรองรายการผู้สมัครตามทฤษฎีสีและสีมงคล/อัปมงคล

  Input:
    - candidates: รายการเสื้อผ้าผู้สมัคร [{'clothId': 1, 'colorHex': '#FF0000'}, ...]
    - theory_colors_hex: สีจากทฤษฎี ['#00FFFF', '#FF8000']
    - good_lucky: สีมงคล ['#FFD700']
    - bad_lucky: สีอัปมงคล ['#000000']
    - theory_threshold: 25 (Delta E สูงสุดที่ยอมรับสำหรับทฤษฎีสี)
    - lucky_threshold: 25 (Delta E สูงสุดที่ยอมรับสำหรับสีมงคล/อัปมงคล)

  Output:
    - valid: รายการที่ผ่านการกรอง
    - blocked: รายการที่ถูกบล็อก พร้อมเหตุผล

  ขั้นตอนการกรอง (ตามลำดับความสำคัญ):

    1. ตรวจสอบสีอัปมงคล (ลำดับสูงสุด)
       - คำนวณ Delta E กับทุกสีอัปมงคล
       - ถ้า Delta E <= 25 → บล็อกทันที
       - ใช้กับทุกสี รวมถึงสีกลาง
       - เหตุผล: 'unlucky color (ΔE: X.X)'

    2. ตรวจสอบสีกลาง (Neutral)
       - เรียกใช้ is_neutral_color()
       - ถ้าเป็นสีกลาง → ผ่านทันที
       - ไม่ต้องตรวจสอบทฤษฎีสีหรือสีมงคล
       - เหตุผล: สีกลางเข้ากับทุกอย่าง

    3. ตรวจสอบทฤษฎีสี (สำหรับสีสด)
       - คำนวณ Delta E กับทุกสีจากทฤษฎี
       - ถ้า Delta E <= 25 → ตั้งค่า is_theory_match = True

    4. ตรวจสอบสีมงคล (โบนัส)
       - คำนวณ Delta E กับทุกสีมงคล
       - ถ้า Delta E <= 25 → ตั้งค่า is_lucky = True

    5. ตัดสินใจสุดท้าย
       - ถ้า is_theory_match หรือ is_lucky = True → ผ่าน
       - ถ้าทั้งสองเป็น False → บล็อก
       - เหตุผล: 'no theory match (ΔE: X.X) and not lucky (ΔE: X.X)'

  ตัวอย่างการทำงาน:
    สีหลัก: #FF0000 (แดง)
    ทฤษฎี: complementary → สร้างสี #00FFFF (ฟ้า-เขียว)

    ผู้สมัคร #1: #10FFEF (ฟ้า-เขียวอ่อน)
      - Delta E กับ #00FFFF = 8.2
      - 8.2 <= 25 → ผ่าน (theory match)

    ผู้สมัคร #2: #808080 (เทา)
      - เป็นสีกลาง → ผ่านทันที

    ผู้สมัคร #3: #FF00FF (ม่วง)
      - Delta E กับ #00FFFF = 52.3
      - 52.3 > 25 → บล็อก (no theory match)

match_colors_by_item_type(main_item, theories, lucky, pants_candidates, tops_candidates, outer_candidates, has_outer)
  - จับคู่สีตามประเภทของไอเทมหลัก

  Input:
    - main_item: {'clothId': 1, 'colorHex': '#FF0000', 'clothTypeName': 'เสื้อ'}
    - theories: ['complementary', 'analogous']
    - lucky: {'good': ['#FFD700'], 'bad': ['#000000']}
    - pants_candidates: รายการกางเกง
    - tops_candidates: รายการเสื้อ
    - outer_candidates: รายการเสื้อคลุม
    - has_outer: True/False

  Output:
    {
      "main_item_id": 1,
      "pants_options": [...],
      "tops_options": [...],
      "outer_options": [...],
      "blocked_items": {
        "pants": [...],
        "tops": [...],
        "outer": [...]
      }
    }

  Logic การจับคู่:
    - ถ้าไอเทมหลัก = เสื้อ/เสื้อคลุม → หากางเกงที่เข้ากัน
    - ถ้าไอเทมหลัก = กางเกง/กระโปรง → หาเสื้อที่เข้ากัน
    - ถ้า has_outer = True → หาเสื้อคลุมที่เข้ากัน

  ขั้นตอนการทำงาน:
    1. เตรียมข้อมูล (แปลงสีเป็นตัวพิมพ์ใหญ่)
    2. กำหนดว่าจะหาประเภทไหน (ตาม clothTypeName)
    3. สร้างสีจากทฤษฎีสี (เรียก get_theory_colors)
    4. กรองแต่ละประเภท (เรียก filter_and_match_colors)
    5. รวมผลลัพธ์


================================
5. MATCHING_LOGIC.PY
================================

หน้าที่: ฟังก์ชันหลัก (Entry Point) สำหรับการจับคู่สี

ฟังก์ชัน:
---------

match_colors_logic(data)
  - ฟังก์ชันหลักที่เรียกใช้งานจากภายนอก
  - ตรวจสอบและเตรียมข้อมูลก่อนส่งไปประมวลผล

  Input:
    {
      "main_item": {
        "clothId": 1,
        "colorHex": "#FF0000",
        "clothTypeName": "เสื้อ"
      },
      "theory": ["complementary", "analogous"],
      "lucky_colors": {
        "good": ["#FFD700"],
        "bad": ["#000000"]
      },
      "pants_candidates": [...],
      "tops_candidates": [...],
      "outer_candidates": [...],
      "has_outer": false
    }

  Output:
    {
      "main_item_id": 1,
      "pants_options": [...],
      "tops_options": [...],
      "outer_options": [...],
      "blocked_items": {
        "pants": [...],
        "tops": [...],
        "outer": [...]
      }
    }

  ขั้นตอนการทำงาน:
    1. รับข้อมูล data
    2. ตรวจสอบ theory (รองรับ string เดี่ยว หรือ array)
    3. ถ้าไม่มี theory → คืนค่าว่างเปล่า
    4. ส่งข้อมูลไปยัง match_colors_by_item_type()
    5. คืนผลลัพธ์


================================
FLOW การทำงานทั้งหมด
================================

1. เรียกใช้ match_colors_logic(data)
   ↓
2. ตรวจสอบว่ามี theory หรือไม่
   ↓
3. เรียก match_colors_by_item_type()
   ↓
4. เรียก get_theory_colors() → สร้างสีตามทฤษฎี
   ↓
5. เรียก filter_and_match_colors() → กรองแต่ละประเภท
   ↓
   5.1 สำหรับแต่ละผู้สมัคร:
       - ตรวจสอบสีอัปมงคล (ใช้ delta_e_distance)
       - ตรวจสอบสีกลาง (ใช้ is_neutral_color)
       - ตรวจสอบทฤษฎีสี (ใช้ delta_e_distance)
       - ตรวจสอบสีมงคล (ใช้ delta_e_distance)
       - ตัดสินใจผ่านหรือบล็อก
   ↓
6. รวมผลลัพธ์และคืนค่า


================================
ตัวอย่างการใช้งาน
================================

ตัวอย่างที่ 1: จับคู่เสื้อแดงกับกางเกง
--------------------------------------
Input:
  - เสื้อแดง #FF0000
  - ทฤษฎี: complementary
  - กางเกงผู้สมัคร: #00FFFF (ฟ้า-เขียว), #808080 (เทา), #FF00FF (ม่วง)

Process:
  1. สร้างสีตรงข้าม → #00FFFF (ฟ้า-เขียว)
  2. กรองกางเกง:
     - #00FFFF: Delta E = 0 → ผ่าน (perfect match)
     - #808080: สีกลาง → ผ่านทันที
     - #FF00FF: Delta E = 52.3 → บล็อก

Output:
  - pants_options: [#00FFFF, #808080]
  - blocked_items: [#FF00FF]


ตัวอย่างที่ 2: จับคู่กับสีมงคล
-------------------------------
Input:
  - เสื้อน้ำเงิน #0000FF
  - ทฤษฎี: analogous
  - สีมงคล: #FFD700 (ทอง)
  - กางเกงผู้สมัคร: #FFD700 (ทอง), #00FF00 (เขียว)

Process:
  1. สร้างสีใกล้เคียง → #0080FF, #8000FF
  2. กรองกางเกง:
     - #FFD700: Delta E กับทฤษฎี > 25 แต่กับสีมงคล = 0 → ผ่าน (lucky)
     - #00FF00: Delta E กับทฤษฎี > 25 และไม่ใช่สีมงคล → บล็อก

Output:
  - pants_options: [#FFD700]
  - blocked_items: [#00FF00]


================================
หมายเหตุสำคัญ
================================

1. ค่า Threshold ทั้งหมดตั้งไว้ที่ 25
   - ปรับได้ตามความเหมาะสม
   - ยิ่งต่ำยิ่งเข้มงวด, ยิ่งสูงยิ่งผ่อนปรน

2. สีกลางมีความสำคัญพิเศษ
   - เข้ากับทุกสี
   - ผ่านการกรองทันที
   - แต่ยังคงถูกบล็อกถ้าตรงกับสีอัปมงคล

3. การจับคู่ใช้ OR logic
   - ผ่านได้ถ้า: เข้าทฤษฎีสี หรือ เป็นสีมงคล
   - ไม่จำเป็นต้องเข้าทั้งสองเงื่อนไข

4. Delta E CIE2000 เป็นมาตรฐาน
   - สอดคล้องกับการรับรู้ของมนุษย์
   - แม่นยำกว่า RGB distance

5. ทฤษฎีสีที่รองรับ
   - complementary: สีตรงข้าม (180°)
   - analogous: สีใกล้เคียง (±30°)
   - triadic: สีสามเหลี่ยม (120°, 240°)


================================
สรุป
================================

โมดูลนี้ออกแบบมาให้:
- แยกหน้าที่ชัดเจน (Separation of Concerns)
- อ่านง่าย บำรุงรักษาง่าย
- นำกลับมาใช้ได้ (Reusable)
- ทดสอบได้ทีละส่วน
- ขยายได้ในอนาคต

การเพิ่มทฤษฎีสีใหม่:
- เพิ่มฟังก์ชันใน color_theory.py
- เพิ่ม condition ใน get_theory_colors()
- ไม่ต้องแก้ไขส่วนอื่นๆ

การปรับ threshold:
- แก้ไขค่าใน filter_and_match_colors()
- หรือส่งเป็น parameter จากภายนอก
